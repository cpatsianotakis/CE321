/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//  ECE Dep. University of Thessaly                                            //
//  CE 321 OS                                                                  //
//                                                                             //
//  Project 3                                                                  //
//                                                                             //
//  Charalampos Patsianotakis 2116 cpatsianotakis@uth.gr       ΟΦΗ             //
//  Panagiotis  Anastasiadis  2134 paanastasiadis@uth.gr       ΑΕΚ             //
//  Tilemachos  Tsiapras      2229 ttsiapras@uth.gr            ΠΑΟ             //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

//===============================================================================================================================//
//===============================================================================================================================//
Γενικές Πληροφορίες:
	Systemcalls:
		-Για μεταφέρουμε τις τιμές στα δύο system calls από το slob.c βάζουμε δύο extern long int μεταβλητές
		στο αρχειο linux/slab.h
		-Οι μεταβλητές αυτές δηλώνονται εκ νέου στο slab.h και λαμβάνουν τις τιμές τους από τις αντίστοιχες διαδικασίες
		-Για  τη memory_free διαπερνάμε όλες τις λίστες (και τις τρεις) και αθροίζουμε τις τιμές units της κάθε σελίδας.
		Έπειτα αφαιρείται η τιμή του block που επιλέχθηκε.
		-Για τη memory_alloc αθροίζεται μία νέα σελίδα κατά την κλήση της slob_new_pages και αφαιρείται από την slob_free_pages.

//===============================================================================================================================//
//===============================================================================================================================//
Γενικες οδηγίες:
	Επιλογή πρακτικής του Allocator(slob.c):
		-Στην αρχη του αρχείου έχουμε δύο DEFINE,  BEST_FIT_ALLOCATOR και DEULAULT_ALLOCATOR
		-Όταν θέλουμε τον Best-fit => Comment(DEFAULT_ALLOCATOR) , Uncomment(BEST_FIT_ALLOCATOR)
		-Όταν θέλουμε τη Default πρακτική => Comment(BEST_FIT_ALLOCATOR) , Uncomment(DEFAULT_ALLOCATOR)

	Compiling:
		-Χρησιμοποιώντας το Makefile που δίνουμε γίνεται:
			- το compilation  και η δημιουργία της wrapper βιβλιοθήκης των system_call  
			“ libmemory_stats ”
			- το compilation του user-level προγραμματος ("test_hw3.c") που καλεί τα ststem_calls.
			- το compilation του experiments.c εφαρμογής που έχουμε δημιουργήσει για να τεστάρουμε την επίδοση των allocators.

	Πειράματα:

		-Δύο τρόπους έχουμε να συγκρίνουμε τις δύο υλοποίησεις:
			-test_hw3
			-expetiments

		-Το test_hw3 είναι ένα απλό πρόγραμμα σε C, το οποίο καλεί τα 2 syscalls ( free_memory_stats(), alloc_memory_stats() )
		ώστε να μετρηθούν σε τυχαίες χρονικές στιγμές ο ελεύθερος και δεσμευμένος χώρος.

		-Το experiments είναι ένα συνολικό benchmark, όπου παράγει 3 διεργασίες, παίρνει στοιχεία από την μνήμη καλώντας τα 2 
		syscalls που αναφέρθηκαν και προβάλει στο terminal τα στοιχεία για ITERATIONS φορές. Ο μέσος όρος τους αποθηκεύεται σε έναν
		πίνακα και μετά την διάτρεξη ITERATIONS δευτερολέπτων, παράγεται ο μέσος όρος τους και αποθηκεύται στο αρχείο 
		first_fit_test_results.txt / best_fit_test_results.txt, ανάλογα με τί αλγόριθμο έχουμε δηλώσει ότι υλοποιεί ο mm εκείνη την στιγμή.

//===============================================================================================================================//
//===============================================================================================================================//
Παρατηρήσεις:
	-Όταν εφαρμόζουμε την best-fit, τα αποτελέσματα που περιμένουμε είναι ότι οι δεσμεύσεις μνήμης θα παίρνουν 
	περισσότερη ώρα, με το fregmentation όμως να είναι αρκετά μικρότερο. 
	Αυτό σημβαίνει διότι η αναζήτηση του καλύτερου block για το αίτημα μας, αφήνει περίσσευμα χώρου , επιβαρύνοντας όμως την 
	απόδοση του συστήματος με τις πολλαπλές διαπεράσεις των λιστών προκειμένου να εντοπίσουμε τη βέλτιστη σελίδα και το βέλτιστο 
	block στη σελίδα αυτή.
	-Το παραπάνω μπορεί να φανεί από τον λόγο "memory_alloc" προς "memory_free" ο οποίος είναι μεγαλύτερος 
	-Όλα όσα περιμέναμε από τη θεωρία μπορούν να φανούν από τα τις εξόδους του benchmarking που τρέξαμε, το οποίο έκανε προσομοίωση
	πιθανός σεναρίων έντονης δέσμευσης και αποδέσμευσης μνήμης.

//===============================================================================================================================//
//===============================================================================================================================//
Αποτελεσματα benchmarking:

FIRST FIT RESULTS:

Plateau (oropedio) results:
Mean Allocation: 69228
Mean Free:       573922

Rise (rampa) results:
Mean Allocation: 69272
Mean Free:       518395

Compiler streaming results:
Mean Allocation: 69355
Mean Free:       651535



BEST FIT RESULTS:

Plateau (oropedio) results:
Mean Allocation: 68380
Mean Free:       1086574

Rise (rampa) results:
Mean Allocation: 68384
Mean Free:       1082863

Compiler streaming results:
Mean Allocation: 68410
Mean Free:       1078386