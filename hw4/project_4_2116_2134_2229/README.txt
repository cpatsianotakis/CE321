/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//  ECE Dep. University of Thessaly                                            //
//  CE 321 OS                                                                  //
//                                                                             //
//  Project 4                                                                  //
//                                                                             //
//  Charalampos Patsianotakis 2116 cpatsianotakis@uth.gr                       //
//  Panagiotis  Anastasiadis  2134 paanastasiadis@uth.gr                       //
//  Tilemachos  Tsiapras      2229 ttsiapras@uth.gr                            //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

//===============================================================================================================================//
//===============================================================================================================================//
Γενικές Πληροφορίες Εργασίας:

	--> Στην εργασία αυτή, υλοποιήθηκε μια απλή έκδοση File System που χρησιμοποιεί το FUSE.

	--> Τα αρχεία είναι εικονικά ως προς το πραγματικό File System.

	--> Στο σύστημά μας προσθέσαμε λειτουργικότητα στις init, get_attr, read, write, unlink .

	--> ΠΡΟΣΟΧΗ!-> Έχουν τροποποιηθεί τα αρχεία Makefiles στους φακέλους /src και /example. 
				   Αυτό σημαίνει πως δεν πρέπει να εκτελεστεί η εντολή ./configure,
				   διότι τα Makefiles θα γυρίσουν στην αρχική τους κατάσταση που δεν είναι η επιθυμητή.

	--> Παραδοχές: Το σύστημα είναι volatile, το μέγεθος αρχείων είναι πολλαπλάσιο των 4 KB, όπως και το
	               offset και μέγεθος των λειτουργιών που αναφέρθηκαν. Επίσης το σύστημα υποστηρίζει μέγιστο
	               αριθμό αρχείων 10, καθώς και κάθε αρχείο έχει μέγιστο μέγεθος τα 64 ΚΒ.

//===============================================================================================================================//
//===============================================================================================================================//

//===============================================================================================================================//
//===============================================================================================================================//
//---------------------------------------------------Πειραματική Αξιολόγηση------------------------------------------------------//
  Γενικές Πληροφορίες

	--> Για την πειραματική μας αξιολόγηση χρησιμοποιήθηκε το λογισμικό nano καθώς και ένα δικό μας πρόγραμμα,
	    το finalTest.


	--> Το finalTest έχει 4 λειτουργικότητες:
		--> WRITE_FILE     : Απλό γράψιμο σε αρχείο που δημιουργείται άπό το πρόγραμμα.
		--> OVERWRITE_FILE : Γράψιμο σε αρχείο που έχει δημιουργηθεί ήδη ( το testFile2.txt με λειτουργικότητα WRITE_FILE ).
		--> READ_FILE      : Ανάγνωση από αρχείο. Αρχικά διαβάζουμε ολόκληρο το testDirectory/testFile1.txt ( που έχει παραχθεί
		                     στο WRITE_FILE ) και έπειτα ένα τμήμα του ( στην προκειμένη περίπτωση με offset τα 12 KB με μέγεθος
		                     4 ΚΒ ).
		--> DELETE_FILE    : Διαγράφει τα αρχεία testDirectory/testFile1.txt και testFile2.txt. 

	--> H πρώτη λειτουργικότητα που θα πρέπει να τρέξει είναι το WRITE_FILE, το οποίο και παράγει τα test αρχεία που θα
	    χρησιμοποιηθούν στις υπόλοιπες. Διαφορετικά, θα το πρόγραμμα θα βγάλει error, ότι δεν υπάρχουν τα αρχεία.

//-------------------------------------------------------------------------------------------------------------------------------//
  Στήσιμο Πειραματικής Αξιολόγησης:

	--> Στην αρχή του finalTest.c γίνονται define οι λειτουργικότητες. Ανάλογα ποια λειτουργικότητα θελήσουμε να 
	    χρησιμοποιήσουμε ορίζουμε το αντίστοιχο define σε 1. Τα υπόλοιπα τα κρατάμε σε 0.

	--> Έπειτα η πειραματική αξιολόγηση είναι έτοιμη να τρέξει εφόσον έχουμε τρέξει την εντολή make all στον φάκελο example .
	    Μπορεί να στηθεί ανεξάρτητα από το υπόλοιπο σύστημα με την εντολή make finalTest.

//-------------------------------------------------------------------------------------------------------------------------------//
  Τρέξιμο Πειραματικής Αξιολόγησης:

	--> Για να ξεκινήσει η λειτουργία του File System (εφόσον και έχει ήδη δημιουργηθεί με την εντολή make all) αρκεί η εκτέλεση
	    της εντολής (εφόσον βρισκόμαστε στον φάκελο example ) "../src/bbfs rootdir mountdir".
	
	--> Μετακινούμαστε στον φάκελο example και τρέχουμε το πρόγραμμα finalTest

	--> Ανάλογα με την λειτουργικότητα που έχουμε ορίσει:

		--> WRITE_FILE      : Περιμένουμε να δούμε την δημιουργία 2 αρχείων, το testFile1.txt στο mountdir και το testFile2.txt
		                      στο mountdir/testDirectory. Τα αρχεία αυτά θα έχουν 40 ΚΒ τυχαία κεφαλαία γράμματα.

		--> OVERWRITE_FILE  : Περιμένουμε να δούμε στο testFile2.txt τα δεδομένα που υπάρχουν στην περιοχή 8 KB - 16 KB να έχουν
		                      αντικατασταθεί από αυτά που υπάρχουν στο 0 ΚΒ - 8 ΚΒ.

		--> READ_FILE       : Δημιουργούνται 2 νέα αρχεία στον φάκελο που βρισκόμαστε, τα readFile1.txt και readFile2.txt . Στο
		                      readFile1.txt βρίσκεται όλο το περιεχόμενο του αρχείου mountdir/testDirectory/testFile1.txt ενώ
		                      στο readFile2.txt βρίσκεται το περιεχόμενο του αρχείου mountdir/testDirectory/testFile1.txt στην
		                      περιοχή 12 ΚΒ ως την περιοχή 20 ΚΒ.

		--> DELETE_FILE     : Περιμένουμε να διαγραφούν τα αρχεία testFile1.txt στο mountdir και testFile2.txt στο 
		                      mountdir/testDirectory
//===============================================================================================================================//
//===============================================================================================================================//

//===============================================================================================================================//
//===============================================================================================================================//
Στοιχεία από Blocks:

	--> Blocks είναι τα πακέτα από bytes από τα οποία και προκύπτουν τα αρχεία.
	
	--> Κάθε block:

		--> Έχει μέγεθος 4 KB.

		--> Είναι αποθηκευμένο σε ένα αρχείο του πραγματικού File System.

		--> Αντιστοιχεί σε μοναδικο ID, με το οποίο ονομάζεται το πραγματικό αρχείο που αντιστοιχεί σε αυτό.(ex BL034)

		--> Ανάλογα τα bytes που περιέχει, αντιστοιχείται σε ένα μοναδικό hash. Hash είναι στην συγκεκριμένη περίπτωση
	            μία προβολή του διανύσματος των συνολικών 4 KB σε ένα σύνολο 20 Bytes και χρησιμοποιείται για την μείωση
	            του χρόνου συγκρίσεων.

		--> Μπορεί να χρησιμοποιείται από πολλαπλά αρχεία.

	--> Το σύνολο των blocks είναι αποθηκευμένο σε μια αποθήκη, το οποίο άντιστοιχεί
	    σε ένα κρυφό φάκελο το πραγματικού File System με το όνομα ".Storage" .

	--> Μία λίστα με το σύνολο των blocks υπάρχει στον φάκελο .Storage με όνομα hashLedger.txt.
	    Μέσα σε αυτή υπάρχει καταγέγραμμένο το ID του Block, το hash του καθώς και από πόσα αρχεία χρησιμοποιείται
	    αυτό το block.


//===============================================================================================================================//
//===============================================================================================================================//

//===============================================================================================================================//
//===============================================================================================================================//
Στοιχεία από Αρχεία:

	--> Τα αρχεία αναπαρίστανται ουσιαστικά ως λίστα από pointers σε blocks.
	
	--> Κάθε αρχείο:

		--> Έχει μέγεθος πολλαπλάσιο των 4 KB και όχι μεγαλύτερο των 64 ΚΒ. Δηλαδή αντιστοιχεί σε ακριβώς
		    1,2,3,4,5,6,7 ή 8 blocks.

		--> Είναι αποθηκευμένο σε ένα αρχείο του πραγματικού File System ( αρχικά στο rootdir και καθρεπτίζεται στο mountdir).

	    --> Έχει καταγραμμένη μια λίστα από block ID's, που αντιστοιχούν στα blocks του αρχείου.

	--> Ο μέγιστος αριθμών αρχείων είναι 10.


//===============================================================================================================================//
//===============================================================================================================================//

//===============================================================================================================================//
//===============================================================================================================================//
//---------------------------------------------------Στοιχεία που πειράχθηκαν----------------------------------------------------//
  Εγγραφές:

	--> Οι εγγραφές έχουν offset και μέγεθος πολλαπάσιο των 4 KB. 

	--> Μία συνοπτική περιγραφή των συναρτήσεων που καλούνται κατά την διάρκεια των εγγραφών είναι:

                   +------------+
                   | bb_write() |
                   +------------+
                         |_________________________________________________
                         |                            |                    \
                +------------------------+   +----------------+   +------------------+
                | getOverwrittenBlocks() |   | removeBlocks() |   | compressBuffer() | 
                +------------------------+   +----------------+   +------------------+
                                                                   |
                                                           +---------------+
                                                           |  pushBlock()  |
                                                           +---------------+
                                                  _________________|___________________
                                                 /                 |                   \
                                           +-----------+   +---------------+    +---------------+
                                           | getHash() |   | compareHash() |    | createBlock() |
                                           +-----------+   +---------------+    +---------------+
                                                                   |
                                                             +-----------+
                                                             | addHash() |
                                                             +-----------+

		--> Η bb_write() καλεί αρχικά την getOverwrittenBlocks() ανάλογα με το offset και το size που δέχθηκε ώστε
		    να λάβει τα blocks που είναι να αντικατασταθούν. Έπειτα καλεί την removeBlocks() ώστε να τα αφαιρέσει.
		    Τέλος σειρά έχει η compressBuffer() που δημιουργεί τα νέα blocks που θα γραφθούν.

		--> Η getOverwrittenBlocks() επιστρέφει ένα string με τα ID's των block που πρόκειται να αντικατασταθούν.

		--> Η removeBlocks() παίρνει ως όρισμα το string της getOverwrittenBlocks() και διαγράφει τα blocks από την λίστα
		    αρχείων.

		--> Η compressBuffer() αφού λάβει ως όρισμα τα δεδομένα που θα εγγραφούν, τα χωρίζει σε σύνολα από blocks και 
		    επιστρέψει ένα string αποτελούμενο από τα ID's των νέων blocks.
	
		--> Η pushBlock() αφού πάρει τα bytes του block, υπολογίζει το νέο hash ( getHash () ), ελέγχει αν υπάρχει παρόμοιο
		    ( compareHash () )και μόνο στην περίπτωση που δεν υπάρχει, δημιουργεί νέο (createBlock () ).
	
		--> Η getHash() καλεί την SHA1 και επιστρέφει το νέο hash σε μορφή string.
	
		--> Η compareHash(), αφού ανοίξει το hashLedger αναζητάει αν υπάρχει ήδη κάποιο hash με αυτό που πήρε ως όρισμα.
		    Εφόσον αυτό υπάρχει και δεν έχει counter δίπλα ίσο με το 0 (δηλαδή χρησιμοποιείται από κάποιο αρχείο), απλά
		    αυξάνει την τιμή του counter κατά 1. 
		    Αν υπάρχει αλλά έχει και τιμή counter ίση με 0, δημιουργεί και το αρχείο του block.
		    Αν δεν το βρει (πάει στο τέλος του αρχείου), καλεί την addHash(), ώστε να το δημιουργήσει.

		--> Η addHash() αναζητά το πρώτο πεδίο στην hashLedger όπου η τιμή του counter είναι ίση με 0. Το αντικαθιστά με
		    την τιμή hash που έχει πάρει ως όρισμα και του δίνει την τιμή counter με 1. Σε περίπτωση που είναι στο τέλος
		    του αρχείου, δημιουργεί μία sentinel σειρά από κάτω με τιμή counter 0, ούτως ώστε να βοηθήσει την επόμενη ένθεση.


//-------------------------------------------------------------------------------------------------------------------------------//
  Αναγνώσεις:

	--> Οι αναγνώσεις έχουν offset που δίνεται και μέγεθος πολλαπάσιο των 4 KB. 

	--> Μία συνοπτική περιγραφή των συναρτήσεων που καλούνται κατά την διάρκεια των αναγνώσεων είναι:

                   +-----------+
                   | bb_read() |
                   +-----------+
                         |
                   +------------+
                   | readFile() |
                   +------------+
                         |
                  +---------------+
                  |  readBlock()  |
                  +---------------+

		--> Η bb_read() καλεί την ReadFile() ώστε να λάβει το σύνολο των bytes του αρχείου σε μορφή δεσμευμένου πίνακα.
		    Στην περίπτωση που η ReadFile() δεν επιστρέψει NULL, δημιουργεί ένα temp αρχείο (μέσα στο directory της "αποθήκης" .Storage)
		    όπου αποθηκεύει το σύνολο των bytes διαβάζοντας εν τέλει από αυτό. Μόλις διαβαστεί το περιεχόμενο, το αρχείο temp διαγράφεται με την εντολή remove.

		--> Η readFile() ανοίγει την λίστα με τα blocks του αρχείου και μετακινεί τον δείκτη στο ( offset / 4 KB ) στοιχείο
		    και καλεί την readBlock() με όρισμα το κάθε ID που διαπερνάει, με στόχο να πάρει σε μορφή string τα δεδομένα
		    που περιέχονται στο συγκεκριμένο block.

		--> Η readBlock() αφού πάρει το ID, ανοίγει το block που αναφέρεται σε αυτό και επιστρέφει ένα string με τα δεδομένα
		    του.

//-------------------------------------------------------------------------------------------------------------------------------//
  Καθορισμός Χαρακτηριστικών Αρχείων:

	--> Τα χαρακτηριστικά αρχείων προσδιορίζονται στην συνάρτηση bb_getattr() του αρχείου bbfs.c

	--> Μία συνοπτική περιγραφή των συναρτήσεων που καλούνται:

                    +--------------+
                    | bb_getattr() |
                    +--------------+
                           | 
                   +----------------+
                   | findRealSize() |
                   +----------------+
                           |
                   +---------------+
                   |  readBlock()  |
                   +---------------+

		--> Η bb_getattr() είναι η ίδια που είχε το bbfs σύστημα, με διαφορά ότι γίνεται εκ νέου υπολογισμός του μεγέθους
		    αρχείου. Αυτή βρίσκεται μέσω της συνάρτησης findRealSize() της οποίας η επιστρεφόμενη τιμή αποθηκεύεται
		    στην θέση statbuf->st_size.

		--> Η findRealSize() είναι υπεύθυνη να βρει το μέγεθος του αρχείου. Εφόσον έχει ανοίξει την λίστα των blocks που
		    αποτελούν το αρχείο βρίσκει μέσω της readBlock το μέγεθος κάθε block ( το διαβάζει ως string και καλεί την
		    strlen() ) και προσθέτει τα συνολικά μεγέθη.

//-------------------------------------------------------------------------------------------------------------------------------//
  Unlink Αρχείων:

	--> Κατά την διαδικασία του unlink κάνουμε διαγραφή του αρχείου και ελαχιστοποιούμε τους counters προς τα blocks
	    που το χαρακτηρίζουν

	--> Μία συνοπτική περιγραφή των συναρτήσεων που καλούνται:

                                   +-------------+
                                   | bb_unlink() |
                                   +-------------+
                              ____________|__________
                             /                       \
                +------------------------+   +----------------+
                | getOverwrittenBlocks() |   | removeBlocks() | 
                +------------------------+   +----------------+   

		--> Η bb_unlink() αφού ανοίξει το αρχείο προς διαγραφή, λαμβάνει μέσω της getOverwrittenBlocks() τα ID's που περιέχει
		    ( η συνάρτηση getOverwrittenBlocks() έχει προσδιοριστεί στην εγγραφή ) και τα περνάει στην removeBlocks(). Τέλος
		    κάνει unlink μέσω του αντίστοιχου syscall το άρχείο που άνοιξε πριν.

//===============================================================================================================================//
//===============================================================================================================================//
