/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//  ECE Dep. University of Thessaly                                            //
//  CE 321 OS                                                                  //
//                                                                             //
//  Project 4                                                                  //
//                                                                             //
//  Charalampos Patsianotakis 2116 cpatsianotakis@uth.gr                       //
//  Panagiotis  Anastasiadis  2134 paanastasiadis@uth.gr                       //
//  Tilemachos  Tsiapras      2229 ttsiapras@uth.gr                            //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

//===============================================================================================================================//
//===============================================================================================================================//
Γενικές Πληροφορίες:

	--> Στην εργασία αυτή, υλοποιήθηκε μια απλή έκδοση File System που χρησιμοποιεί το FUSE.

	--> O File System Manager που υλοποιήθηκε έχει την δυνατότητα να γράφει και να διαβάζει σε αρχεία.

	--> Τα αρχεία είναι εικονικά ως προς το πραγματικό File System.

//===============================================================================================================================//
//===============================================================================================================================//

//===============================================================================================================================//
//===============================================================================================================================//
Πληροφορίες Πειραματικής Αξιολόγησης:

	--> Για την πειραματική μας αξιολόγηση χρησιμοποιήθηκε το λογισμικό nano καθώς και ένα δικό μας πρόγραμμα,
	    το testbbfs

	--> Το testbbfs παράγεται μόνο του καθώς εκτελείται η εντολή make ( ή make all ), ή μπορεί να παραχθεί ξεχωριστά
		εκτελώντας make testbbfs.

	--> Το testbbfs 

//===============================================================================================================================//
//===============================================================================================================================//

//===============================================================================================================================//
//===============================================================================================================================//
Στοιχεία από Blocks:

	--> Blocks είναι τα πακέτα από bytes από τα οποία και προκύπτουν τα αρχεία.
	
	--> Κάθε block:

		--> Έχει μέγεθος 4 KB.

		--> Είναι αποθηκευμένο σε ένα αρχείο του πραγματικού File System.

	    --> Αντιστοιχεί σε μοναδικο ID, με το οποίο ονομάζεται το πραγματικό αρχείο που αντιστοιχεί σε αυτό.

	    --> Ανάλογα τα bytes που περιέχει, αντιστοιχείται σε ένα μοναδικό hash. Hash είναι στην συγκεκριμένη περίπτωση
	        μία προβολή του διανύσματος των συνολικών 4 KB σε ένα σύνολο 20 Bytes και χρησιμοποιείται για την μείωση
	        του χρόνου συγκρίσεων.

	    --> Μπορεί να χρησιμοποιείται από πολλαπλά αρχεία.

	--> Το σύνολο των blocks είναι αποθηκευμένο σε μια αποθήκη, το οποίο άντιστοιχεί
	    σε ένα κρυφό φάκελο το πραγματικού File System με το όνομα .Storage .

	--> Μία λίστα με το σύνολο των blocks υπάρχει στον φάκελο .Storage με όνομα hashLedger.txt.
	    Μέσα σε αυτή υπάρχει καταγέγραμμένο το ID του Block, το hash του καθώς και από πόσα αρχεία χρησιμοποιείται
	    αυτό το block.


//===============================================================================================================================//
//===============================================================================================================================//

//===============================================================================================================================//
//===============================================================================================================================//
Στοιχεία από Αρχεία:

	--> Τα αρχεία αναπαρίστανται ουσιαστικά ως λίστα από pointers σε blocks.
	
	--> Κάθε αρχείο:

		--> Έχει μέγεθος πολλαπλάσιο των 4 KB και όχι μεγαλύτερο των 64 ΚΒ. Δηλαδή αντιστοιχεί σε ακριβώς
		    1,2,3,4,5,6,7 ή 8 blocks.

		--> Είναι αποθηκευμένο σε ένα αρχείο του πραγματικού File System ( αρχικά στο rootdir και καθρεπτίζεται στο mountdir).

	    --> Έχει καταγραμμένη μια λίστα από block ID's, που αντιστοιχούν στα blocks του αρχείου.

	--> Ο μέγιστος αριθμών αρχείων είναι 10.


//===============================================================================================================================//
//===============================================================================================================================//

//===============================================================================================================================//
//===============================================================================================================================//
//---------------------------------------------------Στοιχεία που πειράχθηκαν----------------------------------------------------//
  Εγγραφές:

	--> Οι εγγραφές έχουν offset και μέγεθος πολλαπάσιο των 4 KB. 

    --> Μία συνοπτική περιγραφή των συναρτήσεων που καλούνται κατά την διάρκεια των εγγραφών είναι:

                   +------------+
                   | bb_write() |
                   +------------+
                         |_________________________________________________
                         |                            |                    \
                +------------------------+   +----------------+   +------------------+
                | getOverwrittenBlocks() |   | removeBlocks() |   | compressBuffer() | 
                +------------------------+   +----------------+   +------------------+
                                                                   |
                                                           +---------------+
                                                           |  pushBlock()  |
                                                           +---------------+
                                                  _________________|___________________
                                                 /                 |                   \
                                           +-----------+   +---------------+    +---------------+
                                           | getHash() |   | compareHash() |    | createBlock() |
                                           +-----------+   +---------------+    +---------------+
                                                                   |
                                                             +-----------+
                                                             | addHash() |
                                                             +-----------+

    	--> Η bb_read() καλεί την ReadFile() ώστε να λάβει το σύνολο των bytes του αρχείου σε μορφή δεσμευμένου πίνακα.
    	    Στην περίπτωση που η ReadFile() δεν επιστρέψει NULL, δημιουργεί ένα temp αρχείο (πραγματικού File System)
    	    όπου αποθηκεύει το σύνολο των bytes και τα επιστρέφει.

    	--> Η getOverwrittenBlocks() επιστρέφει ένα string με τα ID's των block που πρόκειται να αντικατασταθούν.

    	--> Η removeBlocks() παίρνει ως όρισμα το string της getOverwrittenBlocks() και διαγράφει τα blocks από την λίστα
    	    αρχείων.

    	--> Η compressBuffer() αφού λάβει ως όρισμα τα δεδομένα που θα εγγραφούν, τα χωρίζει σε σύνολα από blocks και 
    		επιστρέψει ένα string αποτελούμενο από τα ID's των νέων blocks.

    	--> Η pushBlock() αφού πάρει τα bytes του block, υπολογίζει το νέο hash ( getHash () ), ελέγχει αν υπάρχει παρόμοιο
    		( compareHash () )και μόνο στην περίπτωση που δεν υπάρχει, δημιουργεί νέο (createBlock () ).

    	--> Η getHash() καλεί την SHA1 και επιστρέφει το νέο hash σε μορφή string.

    	--> Η compareHash(), αφού ανοίξει το hashLedger αναζητάει αν υπάρχει ήδη κάποιο hash με αυτό που πήρε ως όρισμα.
    		Εφόσον αυτό υπάρχει και δεν έχει counter δίπλα ίσο με το 0 (δηλαδή χρησιμοποιείται από κάποιο αρχείο), απλά
    		αυξάνει την τιμή του counter κατά 1. 
    		Αν υπάρχει αλλά έχει και τιμή counter ίση με 0, δημιουργεί και το αρχείο του block.
    		Αν δεν το βρει (πάει στο τέλος του αρχείου), καλεί την addHash(), ώστε να το δημιουργήσει.

    	--> Η addHash() αναζητά το πρώτο πεδίο στην hashLedger όπου η τιμή του counter είναι ίση με 0. Το αντικαθιστά με
    		την τιμή hash που έχει πάρει ως όρισμα και του δίνει την τιμή counter με 1. Σε περίπτωση που είναι στο τέλος
    		του αρχείου, δημιουργεί μία sentinel σειρά από κάτω με τιμή counter 0, ούτως ώστε να βοηθήσει την επόμενη ένθεση.


//-------------------------------------------------------------------------------------------------------------------------------//
  Αναγνώσεις:

	--> Οι αναγνώσεις έχουν offset που δίνεται και μέγεθος πολλαπάσιο των 4 KB. 

	--> Μία συνοπτική περιγραφή των συναρτήσεων που καλούνται κατά την διάρκεια των αναγνώσεων είναι:

                   +-----------+
                   | bb_read() |
                   +-----------+
                         |
                   +------------+
                   | readFile() |
                   +------------+
                         |
                  +---------------+
                  |  readBlock()  |
                  +---------------+

	      --> Η bb_read() καλεί την ReadFile() ώστε να λάβει το σύνολο των bytes του αρχείου σε μορφή δεσμευμένου πίνακα.
	          Στην περίπτωση που η ReadFile() δεν επιστρέψει NULL, δημιουργεί ένα temp αρχείο (πραγματικού File System)
	          όπου αποθηκεύει το σύνολο των bytes και τα επιστρέφει.

	      --> Η readFile() ανοίγει την λίστα με τα blocks του αρχείου και μετακινεί τον δείκτη στο ( offset / 4 KB ) στοιχείο
	          και καλεί την readBlock() με όρισμα το κάθε ID που διαπερνάει, με στόχο να πάρει σε μορφή string τα δεδομένα
	          που περιέχονται στο συγκεκριμένο block.

	      --> Η readBlock() αφού πάρει το ID, ανοίγει το block που αναφέρεται σε αυτό και επιστρέφει ένα string με τα δεδομένα
	          του.

//-------------------------------------------------------------------------------------------------------------------------------//
  Καθαρισμός Χαρακτηριστικών Αρχείων:

	--> Τα χαρακτηριστικά αρχείων προσδιορίζονται στην συνάρτηση bb_getattr() του αρχείου bbfs.c

    --> Μία συνοπτική περιγραφή των συναρτήσεων που καλούνται:

                    +--------------+
                    | bb_getattr() |
                    +--------------+
                           | 
                   +----------------+
                   | findRealSize() |
                   +----------------+
                           |
                   +---------------+
                   |  readBlock()  |
                   +---------------+

	      --> Η bb_getattr() είναι η ίδια που είχε το bbfs σύστημα, με διαφορά ότι γίνεται εκ νέου υπολογισμός του μεγέθους
	          αρχείου. Αυτή βρίσκεται μέσω της συνάρτησης findRealSize() της οποίας η επιστρεφόμενη τιμή αποθηκεύεται
	          στην θέση statbuf->st_size.

	      --> Η findRealSize() είναι υπεύθυνη να βρει το μέγεθος του αρχείου. Εφόσον έχει ανοίξει την λίστα των blocks που
	          αποτελούν το αρχείο βρίσκει μέσω της readBlock το μέγεθος κάθε block ( το διαβάζει ως string και καλεί την
	          strlen() ) και προσθέτει τα συνολικά μεγέθη.


//===============================================================================================================================//
//===============================================================================================================================//
